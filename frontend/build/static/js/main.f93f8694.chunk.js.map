{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/MyChats.js","components/userAvatar/UserListItem.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","config","headers","data","axios","post","setItem","stringify","error","description","response","message","isLoading","variant","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","Homepage","Container","maxW","centerContent","Box","d","justifyContent","p","bg","w","m","borderRadius","borderWidth","Text","fontSize","fontFamily","Tabs","isFitted","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","undefined","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","ScrollableChat","ScrollableFeed","map","display","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","concat","marginLeft","padding","maxWidth","content","socket","selectedChatCompare","SingleChat","fetchAgain","setFetchAgain","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","io","emit","on","Authorization","token","get","fetchMessages","newMessageRecieved","chat","includes","pb","px","ArrowBackIcon","overflowY","Spinner","alignSelf","margin","className","onKeyDown","event","key","chatId","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","getSenderFull","Chatbox","ChatLoading","Stack","Skeleton","height","MyChats","setLoggedUser","fetchChats","color","py","isGroupChat","chatName","UserListItem","handleFunction","_hover","background","SideDrawer","search","setSearch","searchResult","setSearchResult","loadingChat","setLoadingChat","accessChat","find","c","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","pl","notif","MenuItem","filter","n","as","rightIcon","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","ml","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.f93f8694.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@gmail.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Chat as Anonymous\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, email, password, pic);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  const postDetails = (pics) => {\r\n    setPicLoading(true);\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(pics);\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"chat-app\");\r\n      data.append(\"cloud_name\", \"piyushproj\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url.toString());\r\n          console.log(data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          Another Messenger\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n              {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\n// import { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({ user, handleFunction }) => {\r\n  // const { user } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          Talk-A-Tive\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  New Message from {getSender(user, notif.chat.users)}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}